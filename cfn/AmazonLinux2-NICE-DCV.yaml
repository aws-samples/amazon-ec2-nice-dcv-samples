AWSTemplateFormatVersion: 2010-09-09
Description: Amazon Linux 2 with NICE DCV ( https://github.com/aws-samples/amazon-ec2-nice-dcv-samples )
Transform: "AWS::LanguageExtensions"

Metadata:
  License:
    Description: >
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon Linux version
        Parameters:
          - osVersion
      - Label:
          default: EC2
        Parameters:
          - ec2Name
          - ec2KeyPair
          - instanceType
      - Label:
          default: NICE DCV
        Parameters:
          - sessionType
          - teslaDriverVersion
          - listenPort
      - Label:
          default: Network
        Parameters:
          - vpcID
          - subnetID
          - displayPublicIP
          - assignStaticIP
      - Label:
          default: Allowed source IP
        Parameters:
          - ingressIPv4
          - ingressIPv6
      - Label:
          default: EBS volume
        Parameters:
          - volumeSize
          - volumeType

Parameters:
  osVersion:
    Type: String
    Description: Processor architecture
    AllowedValues:
      - Amazon Linux 2 (arm64)
      - Amazon Linux 2 (x86_64)
    Default: Amazon Linux 2 (arm64)
  instanceType:
    Type: String
    Description: Instance type (x86_64 or arm64) ( https://console.aws.amazon.com/ec2/#InstanceTypes )
    Default: t4g.medium

  ec2Name:
    Type: String
    Description: EC2 instance name
    Default: Amazon Linux 2-NICE-DCV
  ec2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Key Pair ( https://console.aws.amazon.com/ec2/#KeyPairs )"
    ConstraintDescription: Specify a key pair
    AllowedPattern: ".+"

  vpcID:
    Type: AWS::EC2::VPC::Id
    Description: "VPC with internet connectivity ( https://console.aws.amazon.com/vpcconsole/home#vpcs: )"
    ConstraintDescription: Specify a valid value
    AllowedPattern: ".+"
  subnetID:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet with internet connectivity ( https://console.aws.amazon.com/vpcconsole/home#subnets: )"
    ConstraintDescription: Specify a valid value
    AllowedPattern: ".+"
  displayPublicIP:
    Type: String
    Description: Display EC2 public IP in CloudFormation Outputs (select No if EC2 has no public IP)
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  assignStaticIP:
    Type: String
    Description: Associate static public IPv4 address ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html )
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  ingressIPv4:
    Type: String
    Description: Allowed source prefix (IPv4) ( e.g. 1.2.3.4/32, get your source IP from https://checkip.amazonaws.com )
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    Description: Allowed source prefix (IPv6) ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#ipv6-addressing )
    Default: ::/0

  listenPort:
    Type: Number
    Description: NICE DCV server TCP/UDP port
    MinValue: 1024
    MaxValue: 65535
    Default: 8443
  sessionType:
    Type: String
    Description: Session type and GPU driver ( https://docs.aws.amazon.com/dcv/latest/adminguide/managing-sessions.html#managing-sessions-intro )
    AllowedValues:
      - "virtual"
      - "console-with-NVIDIA_GRID_Driver"
      - "console-with-NVIDIA_Gaming_Driver"
      - "console-with-NVIDIA_Tesla_repo_Driver"
      - "console-with-NVIDIA_Tesla_runfile_Driver"
      - "console"
    Default: "virtual"
  teslaDriverVersion:
    Type: String
    Description: "[*-NVIDIA_Tesla_runfile_Driver] Driver version ( https://www.nvidia.com/Download/index.aspx : Product Type = Data Center/Tesla )"
    Default: 535.154.05

  volumeSize:
    Type: Number
    Description: Volume size in GiB
    MinValue: 10
    MaxValue: 16384
    Default: 25
  volumeType:
    Type: String
    Description: EBS volume type
    AllowedValues:
      - "gp3"
      - "gp2"
    Default: "gp3"

Conditions:
  useElasticIP: !Equals [!Ref assignStaticIP, "Yes"]
  useAl2x86: !Equals [!Ref osVersion, "Amazon Linux 2 (x86_64)"]
  displayPublicIP: !Equals [!Ref displayPublicIP, "Yes"]
  hasEIC:
    !Not [
      !Equals [
        !FindInMap [
          EICprefixMap,
          !Ref "AWS::Region",
          "IpPrefix",
          DefaultValue: 127.0.0.1/32,
        ],
        "127.0.0.1/32",
      ],
    ]
  createEICsg: !And [!Condition "hasEIC", !Condition "displayPublicIP"]

Mappings:
  EICprefixMap: # EC2 instance connect: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html#ec2-instance-connect-setup-security-group
    af-south-1:
      IpPrefix: 13.244.121.196/30
    ap-east-1:
      IpPrefix: 43.198.192.104/29
    ap-northeast-1:
      IpPrefix: 3.112.23.0/29
    ap-northeast-2:
      IpPrefix: 13.209.1.56/29
    ap-northeast-3:
      IpPrefix: 15.168.105.160/29
    ap-south-1:
      IpPrefix: 13.233.177.0/29
    ap-south-2:
      IpPrefix: 18.60.252.248/29
    ap-southeast-1:
      IpPrefix: 3.0.5.32/29
    ap-southeast-2:
      IpPrefix: 13.239.158.0/29
    ap-southeast-3:
      IpPrefix: 43.218.193.64/29
    ap-southeast-4:
      IpPrefix: 16.50.248.80/29
    ca-central-1:
      IpPrefix: 35.183.92.176/29
    cn-north-1:
      IpPrefix: 43.196.20.40/29
    cn-northwest-1:
      IpPrefix: 43.192.155.8/29
    eu-central-1:
      IpPrefix: 3.120.181.40/29
    eu-central-2:
      IpPrefix: 16.63.77.8/29
    eu-north-1:
      IpPrefix: 13.48.4.200/30
    eu-south-1:
      IpPrefix: 15.161.135.164/30
    eu-south-2:
      IpPrefix: 18.101.90.48/29
    eu-west-1:
      IpPrefix: 18.202.216.48/29
    eu-west-2:
      IpPrefix: 3.8.37.24/29
    eu-west-3:
      IpPrefix: 35.180.112.80/29
    il-central-1:
      IpPrefix: 51.16.183.224/29
    me-central-1:
      IpPrefix: 3.29.147.40/29
    me-south-1:
      IpPrefix: 16.24.46.56/29
    sa-east-1:
      IpPrefix: 18.228.70.32/29
    us-east-1:
      IpPrefix: 18.206.107.24/29
    us-east-2:
      IpPrefix: 3.16.146.0/29
    us-gov-east-1:
      IpPrefix: 18.252.4.0/30
    us-gov-west-1:
      IpPrefix: 15.200.28.80/30
    us-west-1:
      IpPrefix: 13.52.6.112/29
    us-west-2:
      IpPrefix: 18.237.140.160/29

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound DCV and SSH
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: SSH (IPv4)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ingressIPv4
        - Description: SSH (IPv6)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV (IPv4)
          IpProtocol: "tcp"
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV (IPv6)
          IpProtocol: "tcp"
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV QUIC (IPv4)
          IpProtocol: "udp"
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV QUIC (IPv6)
          IpProtocol: "udp"
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: !Ref ingressIPv6
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: ::/0
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  securityGroupForEIC:
    Condition: createEICsg
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow in-browser SSH via EC2 Instance Connect
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: SSH from EIC IP (if available)
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            !FindInMap [
              EICprefixMap,
              !Ref "AWS::Region",
              "IpPrefix",
              DefaultValue: 127.0.0.1/32,
            ]
      SecurityGroupEgress:
        - Description: Allow ICMP to EIC IP
          IpProtocol: "icmp"
          FromPort: -1
          ToPort: -1
          CidrIp:
            !FindInMap [
              EICprefixMap,
              !Ref "AWS::Region",
              "IpPrefix",
              DefaultValue: 127.0.0.1/32,
            ]
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name} - EIC"
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  instanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies: # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-license.html
        - PolicyName: dcvLicensing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
        - PolicyName: gpuDrivers
          PolicyDocument: # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-amd-driver.html
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::nvidia-gaming"
                  - !Sub "arn:${AWS::Partition}:s3:::nvidia-gaming/*"
                  - !Sub "arn:${AWS::Partition}:s3:::ec2-linux-nvidia-drivers"
                  - !Sub "arn:${AWS::Partition}:s3:::ec2-linux-nvidia-drivers/*"
                  - !Sub "arn:${AWS::Partition}:s3:::ec2-amd-linux-drivers"
                  - !Sub "arn:${AWS::Partition}:s3:::ec2-amd-linux-drivers/*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref instanceIamRole

  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Metadata:
      Comment: Install Update files
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup
          console:
            - 01_console
          dcv_gpu_install:
            - 02_dcv_gpu_install
          console-with-NVIDIA_GRID_Driver:
            - 03_gpu_nvidia_grid_install
          console-with-NVIDIA_Gaming_Driver:
            - 04_gpu_nvidia_gaming_install
          console-with-NVIDIA_Tesla_repo_Driver:
            - 05_gpu_nvidia_repo_install
          console-with-NVIDIA_Tesla_runfile_Driver:
            - 06_gpu_nvidia_tesla_install
          virtual-with-NVIDIA_Tesla_repo_Driver:
            - 05_gpu_nvidia_repo_install
          virtual-with-NVIDIA_Tesla_runfile_Driver:
            - 06_gpu_nvidia_tesla_install
        00_setup: # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/ec2-user/update-dcv":
              content: |
                #!/bin/bash
                cd /tmp
                sudo dcv close-session ec2-user
                sudo dcv close-session console
                if (arch | grep -q x86); then
                  rm -f nice-dcv-el7-x86_64.tgz
                  wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-x86_64.tgz
                  tar -xvzf nice-dcv-el7-x86_64.tgz && cd nice-dcv-*-el7-x86_64
                else
                  rm -f nice-dcv-el7-aarch64.tgz
                  wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-aarch64.tgz
                  tar -xvzf nice-dcv-el7-aarch64.tgz && cd nice-dcv-*-el7-aarch64
                fi
                sudo systemctl stop dcvserver
                sudo yum install -y ./nice-dcv-server-*.rpm
                sudo yum install -y ./nice-dcv-web-viewer-*.rpm
                sudo yum install -y ./nice-xdcv-*.rpm
                sudo yum install -y ./nice-dcv-gltest-*.rpm
                sudo systemctl restart dcvserver
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/update-awscli":
              content: |
                #!/bin/bash
                cd /tmp
                rm -f awscliv2.zip
                if (arch | grep -q x86); then
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                /usr/bin/aws --version
                sudo ./aws/install --update -b /usr/bin
                /usr/bin/aws --version
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/etc/systemd/system/dcv-virtual-session.service":
              content: |
                [Unit]
                Description=Create DCV virtual session
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-virtual-session.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-virtual-session.sh":
              content: |
                #!/bin/bash
                dcvUser=ec2-user
                while true;
                do
                  if (/usr/bin/dcv list-sessions | grep -q $dcvUser); then
                    sleep 5
                  else
                    /usr/bin/dcv create-session $dcvUser --owner $dcvUser --storage-root /home/$dcvUser
                    /usr/bin/dcv list-sessions
                  fi
                done
              mode: "000755"
              owner: "root"
              group: "root"
            "/etc/systemd/system/dcv-post-reboot.service":
              content: |
                [Unit]
                Description=Post install tasks
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-post-reboot.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-post-reboot.sh":
              content: !Sub |
                #!/bin/bash
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                # USB remotization: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-usb-remote.html
                yum install -q -y kernel-devel-$(uname -r)
                yum install -q -y usbutils
                #dcvusbdriverinstaller --quiet

                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}
                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                SESSION="${sessionType}"
                case $SESSION in
                  console-with-NVIDIA*)
                    nvidia-xconfig --preserve-busid --enable-all-gpus
                    ;;
                esac

                # virtual or console session: https://docs.aws.amazon.com/dcv/latest/adminguide/config-param-ref.html
                case $SESSION in
                  console*)
                    systemctl set-default graphical.target && systemctl isolate graphical.target
                    sed -i "s/^#create-session/create-session/g" /etc/dcv/dcv.conf
                    ;;
                  virtual*)
                    systemctl enable dcv-virtual-session && systemctl restart dcv-virtual-session
                    ;;
                esac
                systemctl enable dcvserver && systemctl restart dcvserver

                rm -f /etc/systemd/system/dcv-post-reboot.service
                rm -f ${!0}
                systemctl daemon-reload
              mode: "000755"
              owner: "root"
              group: "root"
            "/home/ec2-user/install-NVIDIA-GRID-driver":
              content: |
                #!/bin/bash
                clear
                echo  
                echo    NOTICE: These downloads are for GPU instances and are available to AWS customers only
                echo  
                echo By downloading, you agree to conditions and are bound by license terms as stated on 
                echo    https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html
                echo 
                mkdir -p /tmp/drivers
                cd /tmp/drivers
                sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1                
                aws s3 cp --recursive s3://ec2-linux-nvidia-drivers/latest/ . --region us-east-1
                sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0
                sudo systemctl isolate multi-user.target
                chmod +x NVIDIA-Linux-x86_64*.run
                sudo CC=/usr/bin/gcc10-cc ./NVIDIA-Linux-x86_64*.run
                pwd
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/install-NVIDIA-Gaming-driver":
              content: |
                #!/bin/bash
                clear
                echo  
                echo    NOTICE: These downloads are for GPU instances and are available to AWS customers only
                echo  
                echo By downloading, you agree to conditions and are bound by license terms as stated on 
                echo    https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html
                echo 
                mkdir -p /tmp/drivers
                cd /tmp/drivers
                pwd
                sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
                aws s3 cp --recursive s3://nvidia-gaming/linux/latest/ . --region us-east-1
                sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0
                sudo systemctl isolate multi-user.target
                unzip *Gaming-Linux-Guest-Drivers.zip -d nvidia-drivers
                chmod +x nvidia-drivers/NVIDIA-Linux-x86_64*-grid.run
                sudo CC=/usr/bin/gcc10-cc ./nvidia-drivers/NVIDIA-Linux-x86_64*.run
                pwd
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/install-AMD-driver":
              content: |
                #!/bin/bash
                clear
                echo  
                echo    NOTICE: These downloads are for GPU instances and are available to AWS customers only
                echo  
                echo By downloading, you agree to conditions and are bound by license terms as stated on 
                echo    https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-amd-driver.html
                echo 
                mkdir -p /tmp/drivers                
                cd /tmp/drivers
                pwd
                sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
                aws s3 cp --recursive s3://ec2-amd-linux-drivers/latest/ . --region us-east-1
                sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0
                sudo systemctl isolate multi-user.target
                tar -xf amdgpu-pro-*rhel*.tar.xz
                rm -f *.tar.xz
                cd amdgpu-pro*
                sudo ./amdgpu-pro-install --opencl=pal,legacy
                pwd
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
        01_console:
          files:
            "/etc/X11/xorg.conf": # Modeline generator at http://xtiming.sourceforge.net/
              content: |
                Section "Device"
                    Identifier "DummyDevice"
                    Driver "dummy"
                    Option "ConstantDPI" "true"
                    Option "IgnoreEDID" "true"
                    Option "NoDDC" "true"
                    VideoRam 2048000
                EndSection

                Section "Monitor"
                    Identifier "DummyMonitor"
                    HorizSync   5.0 - 1000.0
                    VertRefresh 5.0 - 200.0
                    Modeline "4096x2160" 760.00 4096 4432 4880 5664 2160 2163 2173 2237
                    Modeline "3840x2160" 712.75 3840 4160 4576 5312 2160 2163 2168 2237
                    Modeline "2560x1440" 312.25 2560 2752 3024 3488 1440 1443 1448 1493
                    Modeline "2048x1536" 80.06 2048 2104 2312 2576 1536 1537 1540 1554
                    Modeline "1920x1440" 69.47 1920 1960 2152 2384 1440 1441 1444 1457
                    Modeline "1920x1200" 26.28 1920 1952 2048 2080 1200 1229 1231 1261
                    Modeline "1920x1080" 23.53 1920 1952 2040 2072 1080 1106 1108 1135
                    Modeline "1600x900" 33.92 1600 1632 1760 1792 900 921 924 946
                    Modeline "1440x900" 30.66 1440 1472 1584 1616 900 921 924 946
                    ModeLine "1366x768" 72.00 1366 1414 1446 1494  768 771 777 803
                    Modeline "1280x800" 24.15 1280 1312 1400 1432 800 819 822 841
                    Modeline "1024x768" 18.71 1024 1056 1120 1152 768 786 789 807
                EndSection

                Section "Screen"
                    Identifier "DummyScreen"
                    Device "DummyDevice"
                    Monitor "DummyMonitor"
                    DefaultDepth 24
                    SubSection "Display"
                        Viewport 0 0
                        Depth 24
                        Modes "4096x2160" "3840x2160" "2560x1440" "2048x1536" "1920x1440" "1920x1200" "1920x1080" "1600x900" "1440x900" "1366x768" "1280x800" "1024x768"                        
                        virtual 4096 2160
                    EndSubSection
                EndSection
              mode: "000644"
              owner: "root"
              group: "root"
        02_dcv_gpu_install:
          files:
            "/etc/systemd/system/dcv-gpu-install.service":
              content: |
                [Unit]
                Description=Install GPU driver
                After=default.target network.target

                [Service]
                ExecStart=/opt/install-gpu-driver

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
        03_gpu_nvidia_grid_install:
          files:
            "/opt/install-gpu-driver": # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html#nvidia-GRID-driver
              content: |
                #!/bin/bash
                mkdir -p /tmp/gpu
                cd /tmp/gpu
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                yum install -q -y kernel-devel-$(uname -r)
                aws s3 cp --recursive s3://ec2-linux-nvidia-drivers/latest/ . --region us-east-1

                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                chmod +x NVIDIA-Linux-x86_64*.run
                CC=/usr/bin/gcc10-cc ./NVIDIA-Linux-x86_64*.run -s

                # Configure dkms.conf to uses gcc10 and ignore version mismatches
                cd /usr/src/nvidia-*
                sed -i "s/\"'make'/& CC=\/usr\/bin\/gcc10-gcc IGNORE_CC_MISMATCH=1/" dkms.conf

                touch /etc/modprobe.d/nvidia.conf
                echo "options nvidia NVreg_EnableGpuFirmware=0" | tee --append /etc/modprobe.d/nvidia.conf

                systemctl enable dcv-post-reboot
                rm -f /etc/systemd/system/dcv-gpu-install.service
                rm -f ${0}
                reboot
              mode: "000755"
              owner: "root"
              group: "root"
        04_gpu_nvidia_gaming_install:
          files:
            "/opt/install-gpu-driver": # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html#nvidia-gaming-driver
              content: |
                #!/bin/bash
                mkdir -p /tmp/gpu
                cd /tmp/gpu
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                yum install -q -y kernel-devel-$(uname -r)
                aws s3 cp --recursive s3://nvidia-gaming/linux/latest/ . --region us-east-1

                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                unzip *Gaming-Linux-Guest-Drivers.zip -d nvidia-drivers
                chmod +x nvidia-drivers/NVIDIA-Linux-x86_64*-grid.run
                CC=/usr/bin/gcc10-cc ./nvidia-drivers/NVIDIA-Linux-x86_64*.run -s

                # Configure dkms.conf to uses gcc10 and ignore version mismatches
                cd /usr/src/nvidia-*
                sed -i "s/\"'make'/& CC=\/usr\/bin\/gcc10-gcc IGNORE_CC_MISMATCH=1/" dkms.conf

                cat << EOF | tee -a /etc/nvidia/gridd.conf
                vGamingMarketplace=2
                EOF

                curl -L -o /etc/nvidia/GridSwCert.txt "https://nvidia-gaming.s3.amazonaws.com/GridSwCert-Archive/GridSwCertLinux_2023_9_22.cert"

                touch /etc/modprobe.d/nvidia.conf
                echo "options nvidia NVreg_EnableGpuFirmware=0" | tee --append /etc/modprobe.d/nvidia.conf

                systemctl enable dcv-post-reboot
                rm -f /etc/systemd/system/dcv-gpu-install.service
                rm -f ${0}
                reboot
              mode: "000755"
              owner: "root"
              group: "root"
        05_gpu_nvidia_repo_install:
          files: # https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#rhel-7-centos-7
            "/opt/install-gpu-driver": # https://docs.nvidia.com/datacenter/tesla/tesla-installation-notes/index.html#centos7
              content: |
                #!/bin/bash
                mkdir -p /tmp/gpu
                cd /tmp/gpu
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                yum install -q -y kernel-devel-$(uname -r)
                yum install -q -y tar bzip2 make automake gcc gcc-c++ pciutils elfutils-libelf-devel libglvnd-devel iptables vim bind-utils wget

                DISTRO=rhel7
                if (arch | grep -q x86); then
                  ARCH=x86_64
                else
                  ARCH=sbsa
                fi
                yum-config-manager --add-repo http://developer.download.nvidia.com/compute/cuda/repos/$DISTRO/$ARCH/cuda-$DISTRO.repo
                yum clean expire-cache
                yum install -q -y nvidia-driver-latest-dkms
                yum install -q -y nvidia-settings

                # Configure dkms.conf to uses gcc10 and ignore version mismatches
                cd /usr/src/nvidia-*
                sed -i "s/\"'make'/& CC=\/usr\/bin\/gcc10-gcc IGNORE_CC_MISMATCH=1/" dkms.conf

                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                systemctl enable dcv-post-reboot
                rm -f /etc/systemd/system/dcv-gpu-install.service
                rm -f ${0}
                reboot
              mode: "000755"
              owner: "root"
              group: "root"
        06_gpu_nvidia_tesla_install:
          files:
            "/opt/install-gpu-driver": # https://docs.nvidia.com/datacenter/tesla/tesla-installation-notes/index.html#runfile
              content: !Sub |
                #!/bin/bash
                mkdir -p /tmp/gpu
                cd /tmp/gpu
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                yum install -q -y kernel-devel-$(uname -r)
                DRIVER_VERSION="${teslaDriverVersion}"
                ARCH=$( /bin/arch )
                curl -fSsl -O https://us.download.nvidia.com/tesla/$DRIVER_VERSION/NVIDIA-Linux-$ARCH-$DRIVER_VERSION.run

                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                chmod +x NVIDIA-Linux-*.run
                CC=/usr/bin/gcc10-cc ./NVIDIA-Linux-*.run -s

                # Configure dkms.conf to uses gcc10 and ignore version mismatches
                cd /usr/src/nvidia-*
                sed -i "s/\"'make'/& CC=\/usr\/bin\/gcc10-gcc IGNORE_CC_MISMATCH=1/" dkms.conf

                systemctl enable dcv-post-reboot
                rm -f /etc/systemd/system/dcv-gpu-install.service
                rm -f ${!0}
                reboot
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId:
        !If [
          useAl2x86,
          "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2}}",
          "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-arm64-gp2}}",
        ]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref instanceProfile
      KeyName: !Ref ec2KeyPair
      SubnetId: !Ref subnetID
      Monitoring: true
      SecurityGroupIds:
        - !Ref securityGroup
        - !If [createEICsg, !Ref securityGroupForEIC, !Ref "AWS::NoValue"]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: !Ref volumeType
            VolumeSize: !Ref volumeSize
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir -p /tmp/cfn
          cd /tmp/cfn

          # disable IPv6 during setup
          sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sysctl -w net.ipv6.conf.default.disable_ipv6=1

          yum clean all
          yum install -q -y deltarpm wget tmux unzip tar curl sed

          export CFN_INIT="/opt/aws/bin/cfn-init"

          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c setup

          # NICE DCV prereq: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
          yum install -q -y gdm gnome-session gnome-classic-session gnome-session-xsession
          yum install -q -y xorg-x11-server-Xorg xorg-x11-fonts-Type1 xorg-x11-drivers 
          yum install -q -y gnome-terminal gnu-free-fonts-common gnu-free-mono-fonts gnu-free-sans-fonts gnu-free-serif-fonts

          # Microphone redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
          yum install -q -y pulseaudio pulseaudio-utils
          amazon-linux-extras install -y firefox

          # Disable the Wayland protocol: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-wayland
          sed -i '/^\[daemon\]/a WaylandEnable=false' /etc/gdm/custom.conf

          # NICE DCV: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
          rpm --import https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
          if (arch | grep -q x86); then
            curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-x86_64.tgz
            tar -xvzf nice-dcv-el7-x86_64.tgz && cd nice-dcv-*-el7-x86_64
          else
            curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el7-aarch64.tgz
            tar -xvzf nice-dcv-el7-aarch64.tgz && cd nice-dcv-*-el7-aarch64
          fi
          yum install -q -y ./nice-dcv-server-*.rpm
          yum install -q -y ./nice-dcv-web-viewer-*.rpm
          yum install -q -y ./nice-xdcv-*.rpm
          yum install -q -y ./nice-dcv-gltest-*.rpm

          # Printer redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-printer.html
          yum install -q -y cups
          GROUP=$(cat /etc/cups/cups-files.conf | grep -oP "SystemGroup\s\K\w+")
          usermod -a -G $GROUP dcv
          systemctl enable cups

          # EPEL: https://docs.fedoraproject.org/en-US/epel/
          amazon-linux-extras install -y epel

          # glxinfo and VAAPI : https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-tools
          yum install -q -y glx-utils
          yum install -q -y libva libva-utils

          # QUIC: https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
          cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf."`date +"%Y-%m-%d"`"
          sed -i "s/^#enable-quic-frontend=true/enable-quic-frontend=true/g" /etc/dcv/dcv.conf

          # Listen port: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-port-addr.html
          sed -i "/^web-port=/d" /etc/dcv/dcv.conf
          sed -i "/^quic-port=/d" /etc/dcv/dcv.conf
          sed -i "/^\[connectivity\]/a web-port=${listenPort}" /etc/dcv/dcv.conf
          sed -i "/^\[connectivity\]/a quic-port=${listenPort}" /etc/dcv/dcv.conf

          # remove AWSCLI version 1
          yum remove -q -y awscli

          cd /tmp/cfn
          # AWS CLI v2: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
          if (arch | grep -q x86); then
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          else
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
          fi
          unzip -q -o awscliv2.zip
          ./aws/install -b /usr/bin
          echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ec2-user/.bashrc

          # X11 dummy driver for non GPU instance console session
          yum install -q -y xorg-x11-drv-dummy
          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c console

          # Higher web client max resolution: https://docs.aws.amazon.com/dcv/latest/adminguide/config-param-ref.html
          sed -i "/^\[display/a web-client-max-head-resolution=(4096, 2160)" /etc/dcv/dcv.conf
          # Console session support
          sed -i "/^\[session-management\/automatic-console-session/a owner=\"ec2-user\"\nstorage-root=\"\/home\/ec2-user\"" /etc/dcv/dcv.conf

          # Update OS
          yum update -q -y
          # yum-cron
          yum install -q -y yum-cron
          sed -i 's/apply_updates = no/apply_updates = yes/g' /etc/yum/yum-cron.conf
          systemctl enable yum-cron

          # USB and GPU driver DKMS
          yum install -q -y dkms

          # 
          systemctl set-default multi-user.target
          systemctl daemon-reload
          systemctl enable dcv-post-reboot

          export SESSION="${sessionType}"
          case $SESSION in
            *NVIDIA*) # install GPU driver after reboot
              systemctl disable dcv-post-reboot

              yum install -q -y unzip gcc make
              yum install -q -y vulkan-devel libglvnd-devel

              $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c dcv_gpu_install
              $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c $SESSION
              systemctl daemon-reload
              systemctl enable dcv-gpu-install
              ;;
          esac

          # enable back IPv6
          sysctl -w net.ipv6.conf.all.disable_ipv6=0
          sysctl -w net.ipv6.conf.default.disable_ipv6=0

          sleep 1 && reboot
      Tags:
        - Key: Name
          Value: !Ref ec2Name
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  elasticIP:
    Condition: useElasticIP
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      NetworkBorderGroup: !Ref AWS::Region
      InstanceId: !Ref ec2Instance
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

Outputs:
  EC2console:
    Description: EC2 console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#Instances:search=${ec2Instance}"

  EC2instanceConnect:
    Condition: createEICsg
    Description: EC2 Instance Connect
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2-instance-connect/ssh?connType=standard&instanceId=${ec2Instance}&osUser=ec2-user&sshPort=22#/"

  SSMsessionManager:
    Description: SSM Session Manager login ("sudo passwd ec2-user" to change password)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${ec2Instance}"

  DCVwebConsole:
    Description: NICE DCV web browser client (login as ec2-user)
    Value: !Sub
      - "https://${IpAddress}:${listenPort}"
      - IpAddress:
          !If [
            displayPublicIP,
            !GetAtt ec2Instance.PublicIp,
            !GetAtt ec2Instance.PrivateIp,
          ]
