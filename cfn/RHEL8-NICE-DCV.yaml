AWSTemplateFormatVersion: 2010-09-09
Description: RHEL 8/9 with NICE DCV (login as ec2-user)

Metadata:
  License:
    Description: >
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0
      
      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      -
        Label:
          default: AMI and instance type ( https://access.redhat.com/solutions/15356 )
        Parameters:
          - imageId
          - instanceType
      -
        Label:
          default: EC2 configuration
        Parameters:
          - ec2Name
          - vpcID
          - subnetID
      -
        Label:
          default: Allowed inbound source IP prefixes to NICE DCV port 8443
        Parameters:
          - ingressIPv4
          - ingressIPv6
      -
        Label:
          default: EBS volume configuration
        Parameters:
          - volumeSize
          - volumeType
          - deviceName

Parameters:
  imageId:
    Type: String
    Description: AMI ID ( aws ec2 describe-images --owners 309956199498 --query "sort_by(Images, &CreationDate)[*].[CreationDate,Name,ImageId]" --filters "Name=name,Values=RHEL-8*"  --output table --region [REGION] ) Select appropriate Graviton instanceType (e.g. tg4.medium ) if using arm64
    ConstraintDescription: Do specify a valid Image ID
    AllowedPattern: "ami.+"
  instanceType:
    Type: String
    Description: Instance Type (x86_64 or arm64) ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html )
    Default: t3.medium

  ec2Name:
    Description: EC2 instance name
    Type: String
    Default: RHEL 8/9-NICE-DCV
  vpcID:
    Type: AWS::EC2::VPC::Id
    Description: VPC with internet connectivity
    ConstraintDescription: Do specify a valid value
    AllowedPattern: ".+"    
  subnetID:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet with internet connectivity
    ConstraintDescription: Do specify a valid value
    AllowedPattern: ".+"

  ingressIPv4:
    Type: String
    Description: Allowed source prefix (IPv4) ( https://checkip.amazonaws.com )
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    Description: Allowed source prefix (IPv6)
    Default: ::/0

  volumeType:
    Type: String
    Description: Volume Type ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html )
    AllowedValues:
      - gp2
      - gp3
    Default: gp3
  volumeSize:
    Type: Number
    Description: Volume Size in GiBs (must be equal or larger than snapshot size)
    Default: 10
  deviceName:
    Type: String
    Description: Device Name
    Default: /dev/sda1

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound DCV 
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: NICE DCV (IPv4)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV QUIC (IPv4)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ingressIPv4
        - Description: NICE DCV (IPv6)
          IpProtocol: "tcp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
        - Description: NICE DCV QUIC (IPv6)
          IpProtocol: "udp"
          FromPort: 8443
          ToPort: 8443
          CidrIpv6: !Ref ingressIPv6
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0          
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: "::/0" 
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: Name
          Value: !Sub "[${AWS::StackName}] - ${ec2Name}"
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  instanceIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies: # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-license.html
      - PolicyName: dcvLicensing
        PolicyDocument:
          Version: '2012-10-17'  
          Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
            Resource: !Sub "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
      - !Ref instanceIamRole

  ec2Instance:
    Type: "AWS::EC2::Instance" 
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M      
    Metadata:
      Comment: Update scripts   
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup       
        00_setup:  # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/ec2-user/update-dcv": 
              content: |
                #!/bin/bash
                cd /tmp
                if ((uname -a | grep x86 1>/dev/null) && (cat /etc/os-release | grep 8. 1>/dev/null)); then            
                  rm -f nice-dcv-el8-x86_64.tgz
                  wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el8-x86_64.tgz
                  tar -xvzf nice-dcv-el8-x86_64.tgz && cd nice-dcv-*-el8-x86_64
                elif ((uname -a | grep aarch64 1>/dev/null) && (cat /etc/os-release | grep 8. 1>/dev/null)); then
                  rm -f nice-dcv-el8-aarch64.tgz
                  wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el8-aarch64.tgz
                  tar -xvzf nice-dcv-el8-aarch64.tgz && cd nice-dcv-*-el8-aarch64
                else
                  rm -f nice-dcv-el9-x86_64.tgz 
                  wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el9-x86_64.tgz                  
                  tar -xvzf nice-dcv-el9-x86_64.tgz && cd nice-dcv-*-el9-x86_64       
                fi
                sudo systemctl stop dcvserver
                sudo yum install -y nice-dcv-server-*.rpm
                sudo yum install -y nice-dcv-web-viewer-*.rpm
                sudo yum install -y nice-xdcv-*.rpm
                sudo systemctl restart dcvserver
              mode: "000755"
              owner: "ec2-user"
              group: "users"
            "/home/ec2-user/update-awscli": 
              content: |
                #!/bin/bash
                cd /tmp
                rm -f awscliv2.zip
                if (uname -a | grep x86 1>/dev/null)
                then
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                sudo ./aws/install --update -b /usr/bin              
              mode: "000755"
              owner: "ec2-user"
              group: "users"              
    Properties:
      ImageId: !Ref imageId
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref instanceProfile
      SubnetId: !Ref subnetID
      Monitoring: true      
      SecurityGroupIds: 
        - !Ref securityGroup
      BlockDeviceMappings:
        - DeviceName: !Ref deviceName
          Ebs:
            VolumeType: !Ref volumeType
            VolumeSize: !Ref volumeSize
            DeleteOnTermination:  true        
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            cd /root/

            dnf install -q -y python3 python3-setuptools wget tmux unzip tar curl sed
            
            # https://docs.aws.amazon.com/systems-manager/latest/userguide/agent-install-rhel.html
            if (uname -a | grep x86 1>/dev/null); then
              sudo dnf install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
            else
              sudo dnf install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_arm64/amazon-ssm-agent.rpm
            fi
            systemctl enable --now amazon-ssm-agent

            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
            # https://aws.amazon.com/premiumsupport/knowledge-center/install-cloudformation-scripts/
            wget -nv https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            tar -xvf aws-cfn-bootstrap-py3-latest.tar.gz
            cd aws-cfn-bootstrap-2.0
            python3 setup.py build
            python3 setup.py install
            
            python3 /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c setup

            # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
            yum groupinstall -q -y 'Server with GUI'
            systemctl isolate multi-user.target

            sed -i "s/^#WaylandEnable=false/WaylandEnable=false/g" /etc/gdm/custom.conf
            yum install -q -y pulseaudio pulseaudio-utils

            # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
            rpm --import https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY

            if ((uname -a | grep x86 1>/dev/null) && (cat /etc/os-release | grep 8. 1>/dev/null)); then            
              wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el8-x86_64.tgz
              tar -xvzf nice-dcv-el8-x86_64.tgz && cd nice-dcv-*-el8-x86_64
            elif ((uname -a | grep aarch64 1>/dev/null) && (cat /etc/os-release | grep 8. 1>/dev/null)); then
              wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el8-aarch64.tgz
              tar -xvzf nice-dcv-el8-aarch64.tgz && cd nice-dcv-*-el8-aarch64
            else
              wget -nv https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el9-x86_64.tgz
              tar -xvzf nice-dcv-el9-x86_64.tgz && cd nice-dcv-*-el9-x86_64       
            fi
            yum install -y nice-dcv-server-*.rpm
            yum install -y nice-dcv-web-viewer-*.rpm
            yum install -y nice-xdcv-*.rpm

            # https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
            cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf.org
            sed -i '/^\[connectivity/a enable-quic-frontend=true' /etc/dcv/dcv.conf

            # session storage: https://docs.aws.amazon.com/dcv/latest/userguide/using-transfer.html
            # https://docs.aws.amazon.com/dcv/latest/adminguide/managing-sessions-start.html#managing-sessions-start-manual
            cat << EoF > /etc/systemd/system/dcv-virtual-session.service
            [Unit]
            Description=Create DCV virtual session for user $DCV-USER
            After=default.target network.target 

            [Service]
            ExecStart=/opt/dcv-virtual-session.sh 

            [Install]
            WantedBy=default.target
            EoF

            cat << EoF > /opt/dcv-virtual-session.sh
            #!/bin/bash
            dcvUser=ec2-user
            while true;
            do
              if (/usr/bin/dcv list-sessions | grep \$dcvUser 1>/dev/null); then
                sleep 5
              else
                /usr/bin/dcv create-session \$dcvUser --owner \$dcvUser --storage-root /home/\$dcvUser
                /usr/bin/dcv list-sessions
              fi
            done
            EoF
            chmod +x /opt/dcv-virtual-session.sh

            cd /root/
            # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html            
            yum remove awscli -y

            if (uname -a | grep x86 1>/dev/null)
            then
              curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            else
              curl -s https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
            fi
            unzip -q -o awscliv2.zip
            ./aws/install -b /usr/bin
            echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ec2-user/.bashrc

            # yum-cron            
            yum install -q -y dnf-automatic
            sed -i 's/apply_updates = no/apply_updates = yes/g' /etc/dnf/automatic.conf
            systemctl enable --now dnf-automatic.timer

            # Add NICE DCV ports (https://firewalld.org/documentation/man-pages/firewall-offline-cmd.html)
            # Get around ":dbus.proxies:Introspect error on :1.170:/org/fedoraproject/FirewallD" error
            systemctl stop firewalld
            firewall-offline-cmd  --add-port 8443/tcp
            firewall-offline-cmd  --add-port 8443/udp
            systemctl disable firewalld

            # text console: DCV virtual sessions only
            systemctl isolate multi-user.target
            systemctl set-default multi-user.target

            systemctl daemon-reload
            systemctl enable --now dcvserver dcv-virtual-session.service

            # cfn-init completed so signal success or not
            python3 /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref ec2Name
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples
        
Outputs:
  InstanceID:
    Description: EC2 Instance ID
    Value: !Ref ec2Instance
 
  PublicIP:
    Description: EC2 Public IP
    Value: !GetAtt ec2Instance.PublicIp

  SSMsessionManager:
    Description: SSM Session Manager login ("sudo passwd ec2-user" to change password)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${ec2Instance}"

  DCVwebConsole:
    Description: DCV web console (login as ec2-user)
    Value: !Sub "https://${ec2Instance.PublicIp}:8443"
    
  DCVdownload:
    Description: DCV client download
    Value: https://download.nice-dcv.com
