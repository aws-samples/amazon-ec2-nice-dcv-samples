AWSTemplateFormatVersion: 2010-09-09
Description:  CentOS Stream 8 with DCV ( https://github.com/aws-samples/amazon-ec2-nice-dcv-samples ) (uksb-632il17651) (tag:CentOS8)
Transform: "AWS::LanguageExtensions"

Metadata:
  License:
    Description: |
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Subscribe from AWS Marketplace before launching. Note that this OS has EOL (end of life) and is not supported
      - Label:
          default: EC2
        Parameters:
          - ec2Name
          - ec2KeyPair
          - osVersion
          - instanceType
          - ec2TerminationProtection
      - Label:
          default: DCV
        Parameters:
          - sessionType
          - listenPort
      - Label:
          default: Network
        Parameters:
          - vpcID
          - subnetID
          - displayPublicIP
          - assignStaticIP
      - Label:
          default: Allowed source IP and ports
        Parameters:
          - ingressIPv4
          - ingressIPv6
          - allowSSHport
          - allowWebServerPorts
          - installWebmin
      - Label:
          default: EBS volume
        Parameters:
          - volumeSize
          - volumeType
      - Label:
          default: AMI ID
        Parameters:
          - centosStream8arm64
          - centosStream8x86
      - Label:
          default: Backup
        Parameters:
          - enableBackup
          - scheduleExpression
          - scheduleExpressionTimezone
          - deleteAfterDays
      - Label:
          default: AWS Global Accelerator (AGA)
        Parameters:
          - enableAGA
      - Label:
          default: Others
        Parameters:
          - r53ZoneID
          - installDocker

Parameters:
  osVersion:
    Type: String
    Description: Version and processor architecture
    AllowedValues:
      - CentOS Stream 8 (arm64)
      - CentOS Stream 8 (x86_64)
    Default: CentOS Stream 8 (arm64)
  ec2Name:
    Type: String
    Description: EC2 instance name
    Default: CentOS Stream 8
  ec2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Key Pair ( https://console.aws.amazon.com/ec2/#KeyPairs )"
    AllowedPattern: .+
    ConstraintDescription: Select a key pair
  instanceType:
    Type: String
    Description: Instance type ( https://console.aws.amazon.com/ec2/#InstanceTypes )
    AllowedPattern: "^[a-z\\-\\d\\.]+$"
    ConstraintDescription: Specify valid EC2 instance type
    Default: t4g.medium
  ec2TerminationProtection:
    Type: String
    Description: Enable EC2 termination protection to prevent accidental deletion
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"

  sessionType:
    Type: String
    Description: Session type ( https://docs.aws.amazon.com/dcv/latest/adminguide/managing-sessions.html#managing-sessions-intro )
    AllowedValues:
      - "virtual"
      - "console"
    Default: "virtual"
  listenPort:
    Type: Number
    Description: DCV server TCP/UDP port
    MinValue: 1024
    MaxValue: 65535
    Default: 8443

  vpcID:
    Type: AWS::EC2::VPC::Id
    Description: "VPC with internet connectivity ( https://console.aws.amazon.com/vpcconsole/home#vpcs: )"
    AllowedPattern: .+
    ConstraintDescription: Select a VPC
  subnetID:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet with internet connectivity ( https://console.aws.amazon.com/vpcconsole/home#subnets: )"
    AllowedPattern: .+
    ConstraintDescription: Select a Subnet
  displayPublicIP:
    Type: String
    Description: Display EC2 public IP in CloudFormation Outputs (select No if EC2 has no public IP)
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  assignStaticIP:
    Type: String
    Description: Associate static public IPv4 address ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html )
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  ingressIPv4:
    Type: String
    Description: Allowed source prefix (IPv4) ( e.g. 1.2.3.4/32, get your source IP from https://checkip.amazonaws.com )
    AllowedPattern: "^\\d+\\.\\d+\\.\\d+\\.\\d+\\/\\d+$"
    ConstraintDescription: Specify valid IPv4 prefix
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    Description: Allowed source prefix (IPv6) ( https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#ipv6-addressing )
    AllowedPattern: .+
    ConstraintDescription: Specify valid IPv6 prefix
    Default: ::/0
  allowSSHport:
    Type: String
    Description: Allow SSH inbound
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  allowWebServerPorts:
    Type: String
    Description: Allow HTTP and/or HTTPS inbound
    AllowedValues:
      - "No"
      - HTTP-and-HTTPS
      - HTTP
      - HTTPS
    Default: "No"
  installWebmin:
    Type: String
    Description: https://webmin.com/
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  volumeSize:
    Type: Number
    Description: Volume size in GiB
    MinValue: 10
    MaxValue: 16384
    Default: 25
  volumeType:
    Type: String
    Description: EBS volume type
    AllowedValues:
      - gp3
      - gp2
    Default: gp3

  centosStream8arm64:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: CentOS Stream 8 (arm64). Subscribe at https://aws.amazon.com/marketplace/pp/prodview-woh2uawnbd6y6
    Default: /aws/service/marketplace/prod-ojl4u755hei5k/latest
  centosStream8x86:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: CentOS Stream 8 (x86_64). Subscribe at https://aws.amazon.com/marketplace/pp/prodview-36nhetkhe3fmk
    Default: /aws/service/marketplace/prod-5eikvoqzz5ed6/latest

  enableBackup:
    Type: String
    Description: Backup EC2 instance
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
  scheduleExpression:
    Type: String
    Description: CRON expression specifying when AWS Backup initiates a backup job
    AllowedPattern: .+
    Default: "cron(0 1 ? * * *)"
  scheduleExpressionTimezone: # https://nodatime.org/TimeZones?version=2024a&format=json
    Type: String
    Description: Timezone to set backup schedule
    AllowedValues:
      - Africa/Abidjan
      - Africa/Algiers
      - Africa/Bissau
      - Africa/Cairo
      - Africa/Casablanca
      - Africa/Ceuta
      - Africa/El_Aaiun
      - Africa/Johannesburg
      - Africa/Juba
      - Africa/Khartoum
      - Africa/Lagos
      - Africa/Maputo
      - Africa/Monrovia
      - Africa/Nairobi
      - Africa/Ndjamena
      - Africa/Sao_Tome
      - Africa/Tripoli
      - Africa/Tunis
      - Africa/Windhoek
      - America/Adak
      - America/Anchorage
      - America/Araguaina
      - America/Argentina/Buenos_Aires
      - America/Argentina/Catamarca
      - America/Argentina/Cordoba
      - America/Argentina/Jujuy
      - America/Argentina/La_Rioja
      - America/Argentina/Mendoza
      - America/Argentina/Rio_Gallegos
      - America/Argentina/Salta
      - America/Argentina/San_Juan
      - America/Argentina/San_Luis
      - America/Argentina/Tucuman
      - America/Argentina/Ushuaia
      - America/Asuncion
      - America/Bahia
      - America/Bahia_Banderas
      - America/Barbados
      - America/Belem
      - America/Belize
      - America/Boa_Vista
      - America/Bogota
      - America/Boise
      - America/Cambridge_Bay
      - America/Campo_Grande
      - America/Cancun
      - America/Caracas
      - America/Cayenne
      - America/Chicago
      - America/Chihuahua
      - America/Ciudad_Juarez
      - America/Costa_Rica
      - America/Cuiaba
      - America/Danmarkshavn
      - America/Dawson
      - America/Dawson_Creek
      - America/Denver
      - America/Detroit
      - America/Edmonton
      - America/Eirunepe
      - America/El_Salvador
      - America/Fort_Nelson
      - America/Fortaleza
      - America/Glace_Bay
      - America/Goose_Bay
      - America/Grand_Turk
      - America/Guatemala
      - America/Guayaquil
      - America/Guyana
      - America/Halifax
      - America/Havana
      - America/Hermosillo
      - America/Indiana/Indianapolis
      - America/Indiana/Knox
      - America/Indiana/Marengo
      - America/Indiana/Petersburg
      - America/Indiana/Tell_City
      - America/Indiana/Vevay
      - America/Indiana/Vincennes
      - America/Indiana/Winamac
      - America/Inuvik
      - America/Iqaluit
      - America/Jamaica
      - America/Juneau
      - America/Kentucky/Louisville
      - America/Kentucky/Monticello
      - America/La_Paz
      - America/Lima
      - America/Los_Angeles
      - America/Maceio
      - America/Managua
      - America/Manaus
      - America/Martinique
      - America/Matamoros
      - America/Mazatlan
      - America/Menominee
      - America/Merida
      - America/Metlakatla
      - America/Mexico_City
      - America/Miquelon
      - America/Moncton
      - America/Monterrey
      - America/Montevideo
      - America/New_York
      - America/Nome
      - America/Noronha
      - America/North_Dakota/Beulah
      - America/North_Dakota/Center
      - America/North_Dakota/New_Salem
      - America/Nuuk
      - America/Ojinaga
      - America/Panama
      - America/Paramaribo
      - America/Phoenix
      - America/Port-au-Prince
      - America/Porto_Velho
      - America/Puerto_Rico
      - America/Punta_Arenas
      - America/Rankin_Inlet
      - America/Recife
      - America/Regina
      - America/Resolute
      - America/Rio_Branco
      - America/Santarem
      - America/Santiago
      - America/Santo_Domingo
      - America/Sao_Paulo
      - America/Scoresbysund
      - America/Sitka
      - America/St_Johns
      - America/Swift_Current
      - America/Tegucigalpa
      - America/Thule
      - America/Tijuana
      - America/Toronto
      - America/Vancouver
      - America/Whitehorse
      - America/Winnipeg
      - America/Yakutat
      - Antarctica/Casey
      - Antarctica/Davis
      - Antarctica/Macquarie
      - Antarctica/Mawson
      - Antarctica/Palmer
      - Antarctica/Rothera
      - Antarctica/Troll
      - Antarctica/Vostok
      - Asia/Almaty
      - Asia/Amman
      - Asia/Anadyr
      - Asia/Aqtau
      - Asia/Aqtobe
      - Asia/Ashgabat
      - Asia/Atyrau
      - Asia/Baghdad
      - Asia/Baku
      - Asia/Bangkok
      - Asia/Barnaul
      - Asia/Beirut
      - Asia/Bishkek
      - Asia/Chita
      - Asia/Choibalsan
      - Asia/Colombo
      - Asia/Damascus
      - Asia/Dhaka
      - Asia/Dili
      - Asia/Dubai
      - Asia/Dushanbe
      - Asia/Famagusta
      - Asia/Gaza
      - Asia/Hebron
      - Asia/Ho_Chi_Minh
      - Asia/Hong_Kong
      - Asia/Hovd
      - Asia/Irkutsk
      - Asia/Jakarta
      - Asia/Jayapura
      - Asia/Jerusalem
      - Asia/Kabul
      - Asia/Kamchatka
      - Asia/Karachi
      - Asia/Kathmandu
      - Asia/Khandyga
      - Asia/Kolkata
      - Asia/Krasnoyarsk
      - Asia/Kuching
      - Asia/Macau
      - Asia/Magadan
      - Asia/Makassar
      - Asia/Manila
      - Asia/Nicosia
      - Asia/Novokuznetsk
      - Asia/Novosibirsk
      - Asia/Omsk
      - Asia/Oral
      - Asia/Pontianak
      - Asia/Pyongyang
      - Asia/Qatar
      - Asia/Qostanay
      - Asia/Qyzylorda
      - Asia/Riyadh
      - Asia/Sakhalin
      - Asia/Samarkand
      - Asia/Seoul
      - Asia/Shanghai
      - Asia/Singapore
      - Asia/Srednekolymsk
      - Asia/Taipei
      - Asia/Tashkent
      - Asia/Tbilisi
      - Asia/Tehran
      - Asia/Thimphu
      - Asia/Tokyo
      - Asia/Tomsk
      - Asia/Ulaanbaatar
      - Asia/Urumqi
      - Asia/Ust-Nera
      - Asia/Vladivostok
      - Asia/Yakutsk
      - Asia/Yangon
      - Asia/Yekaterinburg
      - Asia/Yerevan
      - Atlantic/Azores
      - Atlantic/Bermuda
      - Atlantic/Canary
      - Atlantic/Cape_Verde
      - Atlantic/Faroe
      - Atlantic/Madeira
      - Atlantic/South_Georgia
      - Atlantic/Stanley
      - Australia/Adelaide
      - Australia/Brisbane
      - Australia/Broken_Hill
      - Australia/Darwin
      - Australia/Eucla
      - Australia/Hobart
      - Australia/Lindeman
      - Australia/Lord_Howe
      - Australia/Melbourne
      - Australia/Perth
      - Australia/Sydney
      - CET
      - CST6CDT
      - EET
      - EST
      - EST5EDT
      - Etc/GMT
      - Etc/GMT+1
      - Etc/GMT+10
      - Etc/GMT+11
      - Etc/GMT+12
      - Etc/GMT+2
      - Etc/GMT+3
      - Etc/GMT+4
      - Etc/GMT+5
      - Etc/GMT+6
      - Etc/GMT+7
      - Etc/GMT+8
      - Etc/GMT+9
      - Etc/GMT-1
      - Etc/GMT-10
      - Etc/GMT-11
      - Etc/GMT-12
      - Etc/GMT-13
      - Etc/GMT-14
      - Etc/GMT-2
      - Etc/GMT-3
      - Etc/GMT-4
      - Etc/GMT-5
      - Etc/GMT-6
      - Etc/GMT-7
      - Etc/GMT-8
      - Etc/GMT-9
      - Etc/UTC
      - Europe/Andorra
      - Europe/Astrakhan
      - Europe/Athens
      - Europe/Belgrade
      - Europe/Berlin
      - Europe/Brussels
      - Europe/Bucharest
      - Europe/Budapest
      - Europe/Chisinau
      - Europe/Dublin
      - Europe/Gibraltar
      - Europe/Helsinki
      - Europe/Istanbul
      - Europe/Kaliningrad
      - Europe/Kirov
      - Europe/Kyiv
      - Europe/Lisbon
      - Europe/London
      - Europe/Madrid
      - Europe/Malta
      - Europe/Minsk
      - Europe/Moscow
      - Europe/Paris
      - Europe/Prague
      - Europe/Riga
      - Europe/Rome
      - Europe/Samara
      - Europe/Saratov
      - Europe/Simferopol
      - Europe/Sofia
      - Europe/Tallinn
      - Europe/Tirane
      - Europe/Ulyanovsk
      - Europe/Vienna
      - Europe/Vilnius
      - Europe/Volgograd
      - Europe/Warsaw
      - Europe/Zurich
      - HST
      - Indian/Chagos
      - Indian/Maldives
      - Indian/Mauritius
      - MET
      - MST
      - MST7MDT
      - PST8PDT
      - Pacific/Apia
      - Pacific/Auckland
      - Pacific/Bougainville
      - Pacific/Chatham
      - Pacific/Easter
      - Pacific/Efate
      - Pacific/Fakaofo
      - Pacific/Fiji
      - Pacific/Galapagos
      - Pacific/Gambier
      - Pacific/Guadalcanal
      - Pacific/Guam
      - Pacific/Honolulu
      - Pacific/Kanton
      - Pacific/Kiritimati
      - Pacific/Kosrae
      - Pacific/Kwajalein
      - Pacific/Marquesas
      - Pacific/Nauru
      - Pacific/Niue
      - Pacific/Norfolk
      - Pacific/Noumea
      - Pacific/Pago_Pago
      - Pacific/Palau
      - Pacific/Pitcairn
      - Pacific/Port_Moresby
      - Pacific/Rarotonga
      - Pacific/Tahiti
      - Pacific/Tarawa
      - Pacific/Tongatapu
      - WET
    Default: Etc/UTC
  deleteAfterDays:
    Type: Number
    Description: Number of days after creation that a recovery point (backup) is deleted
    Default: 35

  enableAGA:
    Type: String
    Description: Deploy Global Accelerator
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  r53ZoneID:
    Type: String
    Description: (Optional) Route 53 zone ID access for certbot ( https://console.aws.amazon.com/route53/hostedzones )
    Default: ""

  installDocker:
    Type: String
    Description: Install Docker Engine aka Docker CE ( https://docs.docker.com/engine/ )
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

Conditions:
  useElasticIP: !Equals [!Ref assignStaticIP, "Yes"]
  useCentosStream8x86: !Equals [!Ref osVersion, "CentOS Stream 8 (x86_64)"]
  displayPublicIP: !Equals [!Ref displayPublicIP, "Yes"]
  enableProtection: !Equals [!Ref ec2TerminationProtection, "Yes"]

  hasEIC:
    !Not [
      !Equals [
        !FindInMap [
          EICprefixMap,
          !Ref AWS::Region,
          IpPrefix,
          DefaultValue: 127.0.0.1/32,
        ],
        127.0.0.1/32,
      ],
    ]
  createSgEIC: !And [!Condition hasEIC, !Condition displayPublicIP]
  createSgHTTP:
    !Or [
      !Equals [!Ref allowWebServerPorts, HTTP],
      !Equals [!Ref allowWebServerPorts, HTTP-and-HTTPS],
    ]
  createSgHTTPS:
    !Or [
      !Equals [!Ref allowWebServerPorts, HTTPS],
      !Equals [!Ref allowWebServerPorts, HTTP-and-HTTPS],
    ]
  hasCFprefix:
    !Not [
      !Equals [
        !FindInMap [
          CFprefixMap,
          !Ref AWS::Region,
          PrefixList,
          DefaultValue: pl-none,
        ],
        pl-none,
      ],
    ]
  createCFsgHTTP:
    !And [
      !And [!Condition hasCFprefix, !Condition displayPublicIP],
      !Condition createSgHTTP,
    ]
  createCFsgHTTPS:
    !And [
      !And [!Condition hasCFprefix, !Condition displayPublicIP],
      !Condition createSgHTTPS,
    ]
  createSgSSH: !Equals [!Ref allowSSHport, "Yes"]
  createBackup: !Equals [!Ref enableBackup, "Yes"]

  installWebmin: !Equals [!Ref installWebmin, "Yes"]

  hasR53Zone: !Not [!Equals [!Ref r53ZoneID, ""]]

  createAGA: !Equals [!Ref enableAGA, "Yes"]

Mappings:
  EICprefixMap: # EC2 instance connect: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html#ec2-instance-connect-setup-security-group
    af-south-1:
      IpPrefix: 13.244.121.196/30
      Ipv6Prefix: 2406:da11:700:3b00::/56
    ap-east-1:
      IpPrefix: 43.198.192.104/29
      Ipv6Prefix: 2406:da1e:da1:3c00::/56
    ap-northeast-1:
      IpPrefix: 3.112.23.0/29
      Ipv6Prefix: 2406:da14:1c18:2100::/56
    ap-northeast-2:
      IpPrefix: 13.209.1.56/29
      Ipv6Prefix: 2406:da12:1e1:d900::/56
    ap-northeast-3:
      IpPrefix: 15.168.105.160/29
      Ipv6Prefix: 2406:da16:856:a500::/56
    ap-south-1:
      IpPrefix: 13.233.177.0/29
      Ipv6Prefix: 2406:da1a:74a:4b00::/56
    ap-south-2:
      IpPrefix: 18.60.252.248/29
      Ipv6Prefix: 2406:da1b:d1d:8800::/56
    ap-southeast-1:
      IpPrefix: 3.0.5.32/29
      Ipv6Prefix: 2406:da18:752:6600::/56
    ap-southeast-2:
      IpPrefix: 13.239.158.0/29
      Ipv6Prefix: 2406:da1c:90e:4a00::/56
    ap-southeast-3:
      IpPrefix: 43.218.193.64/29
      Ipv6Prefix: 2406:da19:14b:8c00::/56
    ap-southeast-4:
      IpPrefix: 16.50.248.80/29
      Ipv6Prefix: 2406:da1f:b4f:4600::/56
    ca-central-1:
      IpPrefix: 35.183.92.176/29
      Ipv6Prefix: 2600:1f11:ae3:700::/56
    ca-west-1:
      IpPrefix: 40.176.213.168/29
      Ipv6Prefix: 2600:1f1a:4ff6:d500::/56
    cn-north-1:
      IpPrefix: 43.196.20.40/29
      Ipv6Prefix: 2400:7fc0:86fd:e00::/56
    cn-northwest-1:
      IpPrefix: 43.192.155.8/29
      Ipv6Prefix: 2404:c2c0:87aa:4800::/56
    eu-central-1:
      IpPrefix: 3.120.181.40/29
      Ipv6Prefix: 2a05:d014:17a8:8b00::/56
    eu-central-2:
      IpPrefix: 16.63.77.8/29
      Ipv6Prefix: 2a05:d019:1d6:2100::/56
    eu-north-1:
      IpPrefix: 13.48.4.200/30
      Ipv6Prefix: 2a05:d016:494:f00::/56
    eu-south-1:
      IpPrefix: 15.161.135.164/30
      Ipv6Prefix: 2a05:d01a:c03:4a00::/56
    eu-south-2:
      IpPrefix: 18.101.90.48/29
      Ipv6Prefix: 2a05:d011:cbe:f700::/56
    eu-west-1:
      IpPrefix: 18.202.216.48/29
      Ipv6Prefix: 2a05:d018:403:4e00::/56
    eu-west-2:
      IpPrefix: 3.8.37.24/29
      Ipv6Prefix: 2a05:d01c:4ac:3100::/56
    eu-west-3:
      IpPrefix: 35.180.112.80/29
      Ipv6Prefix: 2a05:d012:c9e:d600::/56
    il-central-1:
      IpPrefix: 51.16.183.224/29
      Ipv6Prefix: 2a05:d025:451:7d00::/56
    me-central-1:
      IpPrefix: 3.29.147.40/29
      Ipv6Prefix: 2406:da17:1db:b00::/56
    me-south-1:
      IpPrefix: 16.24.46.56/29
      Ipv6Prefix: 2a05:d01e:27f:ac00::/56
    sa-east-1:
      IpPrefix: 18.228.70.32/29
      Ipv6Prefix: 2600:1f1e:d1d:e700::/56
    us-east-1:
      IpPrefix: 18.206.107.24/29
      Ipv6Prefix: 2600:1f18:6fe3:8c00::/56
    us-east-2:
      IpPrefix: 3.16.146.0/29
      Ipv6Prefix: 2600:1f16:138f:cf00::/56
    us-gov-east-1:
      IpPrefix: 18.252.4.0/30
      Ipv6Prefix: 2600:1f15:d63:bd00::/56
    us-gov-west-1:
      IpPrefix: 15.200.28.80/30
      Ipv6Prefix: 2600:1f12:fa9:5100::/56
    us-west-1:
      IpPrefix: 13.52.6.112/29
      Ipv6Prefix: 2600:1f1c:12d:e900::/56
    us-west-2:
      IpPrefix: 18.237.140.160/29
      Ipv6Prefix: 2600:1f13:a0d:a700::/56

  CFprefixMap: # aws ec2 describe-managed-prefix-lists --query "PrefixLists[?PrefixListName=='com.amazonaws.global.cloudfront.origin-facing']" --region <REGION>
    af-south-1:
      PrefixList: pl-c0aa4fa9
    ap-east-1:
      PrefixList: pl-14b2577d
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-northeast-3:
      PrefixList: pl-31a14458
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-south-2:
      PrefixList: pl-0a25c3463226fcc61
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ap-southeast-3:
      PrefixList: pl-bca247d5
    ap-southeast-4:
      PrefixList: pl-0fb7e7cfe038ae0e9
    ap-southeast-5:
      PrefixList: pl-09076f83e90b139d0
    ca-central-1:
      PrefixList: pl-38a64351
    ca-west-1:
      PrefixList: pl-0530d4c590b35122b
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-central-2:
      PrefixList: pl-00b37293991dbe6a8
    eu-north-1:
      PrefixList: pl-fab65393
    eu-south-1:
      PrefixList: pl-1bbc5972
    eu-south-2:
      PrefixList: pl-052dcbe0f793f19da
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    il-central-1:
      PrefixList: pl-0dd89524416301988
    me-central-1:
      PrefixList: pl-05266a86378662c23
    me-south-1:
      PrefixList: pl-17b2577e
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb

Resources:
  instanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: [sts:AssumeRole]
      Path: /
      Policies:
        - PolicyName: dcvLicensing
          PolicyDocument: # https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-license.html
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::dcv-license.${AWS::Region}/*
        - !If
          - hasR53Zone
          - PolicyName: Route53CertbotAccess
            PolicyDocument: # Certbot dns_route53 : https://certbot-dns-route53.readthedocs.io/en/stable/
              Version: "2012-10-17"
              Statement: # https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/specifying-rrset-conditions.html
                - Effect: Allow
                  Action:
                    - route53:ListHostedZones
                    - route53:GetChange
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - route53:ChangeResourceRecordSets
                  Resource: !Sub arn:${AWS::Partition}:route53:::hostedzone/${r53ZoneID}
                  Condition:
                    IpAddress:
                      aws:SourceIp: 0.0.0.0/0
                    ForAllValues:StringEquals:
                      route53:ChangeResourceRecordSetsRecordTypes: [TXT]
                    ForAllValues:StringLike:
                      route53:ChangeResourceRecordSetsNormalizedRecordNames:
                        [_acme-challenge.*]
          - !Ref AWS::NoValue
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref instanceIamRole

  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound DCV and SSH
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - !If
          - installWebmin
          - Description: Webmin (IPv4)
            IpProtocol: tcp
            FromPort: 10000
            ToPort: 10000
            CidrIp: !Ref ingressIPv4
          - !Ref AWS::NoValue
        - !If
          - installWebmin
          - Description: Webmin (IPv6)
            IpProtocol: tcp
            FromPort: 10000
            ToPort: 10000
            CidrIpv6: !Ref ingressIPv6
          - !Ref AWS::NoValue
        - !If
          - createSgSSH
          - Description: SSH (IPv4)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref ingressIPv4
          - !Ref AWS::NoValue
        - !If
          - createSgSSH
          - Description: SSH (IPv6)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIpv6: !Ref ingressIPv6
          - !Ref AWS::NoValue
        - Description: DCV (IPv4)
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: !Ref ingressIPv4
        - Description: DCV (IPv6)
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: !Ref ingressIPv6
        - Description: DCV QUIC (IPv4)
          IpProtocol: udp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: !Ref ingressIPv4
        - Description: DCV QUIC (IPv6)
          IpProtocol: udp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: !Ref ingressIPv6
        - !If
          - createSgEIC
          - Description: SSH (EC2 Instance Connect IPv4)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !FindInMap [EICprefixMap, !Ref AWS::Region, IpPrefix]
          - !Ref AWS::NoValue
        - !If
          - createSgEIC
          - Description: SSH (EC2 Instance Connect IPv6)
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIpv6: !FindInMap [EICprefixMap, !Ref AWS::Region, Ipv6Prefix]
          - !Ref AWS::NoValue
        - !If
          - createSgHTTP
          - Description: HTTP (IPv4)
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - createSgHTTP
          - Description: HTTP (IPv6)
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIpv6: ::/0
          - !Ref AWS::NoValue
        - !If
          - createSgHTTPS
          - Description: HTTPS (IPv4)
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - createSgHTTPS
          - Description: HTTPS (IPv6)
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIpv6: ::/0
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: ::/0
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-securityGroup-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  securityGroupForCloudFrontHTTP:
    Type: AWS::EC2::SecurityGroup
    Condition: createCFsgHTTP
    Properties:
      GroupDescription: Allow inbound HTTP from CloudFront
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: HTTP (CloudFront origin IP)
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      SecurityGroupEgress:
        - Description: Ping (CloudFront origin IP)
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          DestinationPrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-CloudFrontHTTP-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  securityGroupForCloudFrontHTTPS:
    Type: AWS::EC2::SecurityGroup
    Condition: createCFsgHTTPS
    Properties:
      GroupDescription: Allow inbound HTTPS from CloudFront
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: HTTPS (CloudFront origin IP)
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourcePrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      SecurityGroupEgress:
        - Description: Ping (CloudFront origin IP)
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          DestinationPrefixListId:
            !FindInMap [CFprefixMap, !Ref AWS::Region, PrefixList]
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-CloudFrontHTTPS-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  securityGroupForR53HealthChecks:
    Type: AWS::EC2::SecurityGroup
    Condition: createAGA
    Properties:
      GroupDescription: Allow Route 53 Health Checks
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: R53 Health Checks (IPv4) 01
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 15.177.0.0/18
        - Description: R53 Health Checks (IPv4) 02
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 52.80.197.0/25
        - Description: R53 Health Checks (IPv4) 03
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 52.80.197.128/25
        - Description: R53 Health Checks (IPv4) 04
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 52.80.198.0/25
        - Description: R53 Health Checks (IPv4) 05
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 52.83.34.128/25
        - Description: R53 Health Checks (IPv4) 06
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 52.83.35.0/25
        - Description: R53 Health Checks (IPv4) 07
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 52.83.35.128/25
        - Description: R53 Health Checks (IPv4) 08
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.183.255.128/26
        - Description: R53 Health Checks (IPv4) 09
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.228.16.0/26
        - Description: R53 Health Checks (IPv4) 10
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.232.40.64/26
        - Description: R53 Health Checks (IPv4) 11
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.241.32.64/26
        - Description: R53 Health Checks (IPv4) 12
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.243.31.192/26
        - Description: R53 Health Checks (IPv4) 13
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.244.52.192/26
        - Description: R53 Health Checks (IPv4) 14
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.245.168.0/26
        - Description: R53 Health Checks (IPv4) 15
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.248.220.0/26
        - Description: R53 Health Checks (IPv4) 16
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.250.253.192/26
        - Description: R53 Health Checks (IPv4) 17
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.251.31.128/26
        - Description: R53 Health Checks (IPv4) 18
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.252.79.128/26
        - Description: R53 Health Checks (IPv4) 19
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.252.254.192/26
        - Description: R53 Health Checks (IPv4) 20
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 54.255.254.192/26
        - Description: R53 Health Checks (IPv4) 21
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 107.23.255.0/26
        - Description: R53 Health Checks (IPv4) 22
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 176.34.159.192/26
        - Description: R53 Health Checks (IPv4) 23
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIp: 177.71.207.128/26
        - Description: R53 Health Checks (IPv6) 01
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2400:7fc0:83cc:cc00::/56
        - Description: R53 Health Checks (IPv6) 02
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2400:7fc0:83cc:cd00::/56
        - Description: R53 Health Checks (IPv6) 03
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2400:7fc0:83cc:ce00::/56
        - Description: R53 Health Checks (IPv6) 04
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2404:c2c0:83cc:cc00::/56
        - Description: R53 Health Checks (IPv6) 05
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2404:c2c0:83cc:cd00::/56
        - Description: R53 Health Checks (IPv6) 06
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2404:c2c0:83cc:ce00::/56
        - Description: R53 Health Checks (IPv6) 07
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2406:da14:7ff:f800::/56
        - Description: R53 Health Checks (IPv6) 08
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2406:da14:fff:f800::/56
        - Description: R53 Health Checks (IPv6) 09
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2406:da18:7ff:f800::/56
        - Description: R53 Health Checks (IPv6) 10
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2406:da18:fff:f800::/56
        - Description: R53 Health Checks (IPv6) 11
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2406:da1c:7ff:f800::/56
        - Description: R53 Health Checks (IPv6) 12
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2406:da1c:fff:f800::/56
        - Description: R53 Health Checks (IPv6) 13
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f14:7ff:f800::/56
        - Description: R53 Health Checks (IPv6) 14
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f14:fff:f800::/56
        - Description: R53 Health Checks (IPv6) 15
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f18:3fff:f800::/56
        - Description: R53 Health Checks (IPv6) 16
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f18:7fff:f800::/56
        - Description: R53 Health Checks (IPv6) 17
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f1c:7ff:f800::/56
        - Description: R53 Health Checks (IPv6) 18
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f1c:fff:f800::/56
        - Description: R53 Health Checks (IPv6) 19
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f1e:7ff:f800::/56
        - Description: R53 Health Checks (IPv6) 20
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:1f1e:fff:f800::/56
        - Description: R53 Health Checks (IPv6) 21
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:f0f0:300:100::/56
        - Description: R53 Health Checks (IPv6) 22
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:f0f0:30e::/48
        - Description: R53 Health Checks (IPv6) 23
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2600:f0f0:30f::/48
        - Description: R53 Health Checks (IPv6) 24
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2a05:d018:7ff:f800::/56
        - Description: R53 Health Checks (IPv6) 25
          IpProtocol: tcp
          FromPort: !Ref listenPort
          ToPort: !Ref listenPort
          CidrIpv6: 2a05:d018:fff:f800::/56
      SecurityGroupEgress:
        - Description: Ping
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 127.0.0.1/32
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-R53HealthChecks-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
    Metadata:
      Comment: Install Update files
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup
          dcv_install:
            - 00_dcv_install
          console:
            - 01_console
        00_setup: # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/cloud-user/update-dcv":
              content: |
                #!/bin/bash
                cd /tmp
                OS_VERSION=$(. /etc/os-release;echo $VERSION_ID | sed -e 's/\..*//g')
                sudo rm -f /tmp/nice-dcv-el$OS_VERSION-$(arch).tgz
                wget https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-el$OS_VERSION-$(arch).tgz
                tar -xvzf nice-dcv-el$OS_VERSION-$(arch).tgz && cd nice-dcv-*-el$OS_VERSION-$(arch)
                sudo dnf install -y ./nice-dcv-server-*.rpm
                sudo dnf install -y ./nice-dcv-web-viewer-*.rpm
                sudo dnf install -y ./nice-xdcv-*.rpm
                if (arch | grep -q x86); then
                  sudo dnf install -y ./nice-dcv-gltest-*.rpm
                fi
                sudo systemctl daemon-reload
              mode: "000755"
              owner: "cloud-user"
              group: "cloud-user"
            "/home/cloud-user/update-awscli":
              content: |
                #!/bin/bash
                cd /tmp
                sudo rm -f /tmp/awscliv2.zip
                curl https://awscli.amazonaws.com/awscli-exe-linux-$(arch).zip -o awscliv2.zip
                unzip -q -o awscliv2.zip
                /usr/bin/aws --version
                sudo ./aws/install --update -b /usr/bin
                /usr/bin/aws --version
              mode: "000755"
              owner: "cloud-user"
              group: "cloud-user"
            "/etc/systemd/system/dcv-virtual-session.service":
              content: |
                [Unit]
                Description=Create DCV virtual session
                After=default.target network.target

                [Service]
                ExecStart=/opt/dcv-virtual-session.sh

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-virtual-session.sh":
              content: |
                #!/bin/bash
                dcvUsers=( "cloud-user" )
                while true;
                do
                  for dcvUser in "${dcvUsers[@]}"
                  do
                    if (! /usr/bin/dcv list-sessions | grep -q $dcvUser); then
                      /usr/bin/dcv create-session $dcvUser --owner $dcvUser --storage-root %home% --type virtual
                    fi
                  done
                  date
                  /usr/bin/dcv list-sessions
                  sleep 5
                done
              mode: "000744"
              owner: "root"
              group: "root"
            "/etc/systemd/system/dcv-post-reboot.service":
              content: |
                [Unit]
                Description=Post install tasks
                After=default.target network.target

                [Service]
                ExecStart=/bin/sh -c "/opt/dcv-post-reboot.sh 2>&1 | tee -a /var/log/install-sw.log"

                [Install]
                WantedBy=default.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/dcv-post-reboot.sh":
              content: !Sub |
                #!/bin/bash
                sysctl -w net.ipv6.conf.all.disable_ipv6=1
                sysctl -w net.ipv6.conf.default.disable_ipv6=1

                python3 /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}

                dnf update -q -y

                sysctl -w net.ipv6.conf.all.disable_ipv6=0
                sysctl -w net.ipv6.conf.default.disable_ipv6=0

                # Add DCV ports (https://firewalld.org/documentation/man-pages/firewall-offline-cmd.html)
                if (systemctl list-units | grep -q firewalld); then
                  if (systemctl status firewalld | grep -q running); then
                    firewall-cmd --permanent --add-port ${listenPort}/tcp
                    firewall-cmd --permanent --add-port ${listenPort}/udp
                    firewall-cmd --permanent --add-service http
                    firewall-cmd --permanent --add-service https
                    if [ "${installWebmin}" = "Yes" ]; then
                      firewall-cmd --permanent --add-port 10000/tcp
                    fi
                    firewall-cmd --reload
                  else
                    firewall-offline-cmd --add-port ${listenPort}/tcp
                    firewall-offline-cmd --add-port ${listenPort}/udp
                    firewall-offline-cmd --add-service http
                    firewall-offline-cmd --add-service https
                    if [ "${installWebmin}" = "Yes" ]; then
                      firewall-offline-cmd --add-port 10000/tcp
                    fi
                  fi
                fi

                SESSION="${sessionType}"
                # virtual or console session: https://docs.aws.amazon.com/dcv/latest/adminguide/config-param-ref.html
                case $SESSION in
                  console*)
                    systemctl set-default graphical.target && systemctl isolate graphical.target
                    sed -i "s/^#create-session/create-session/g" /etc/dcv/dcv.conf
                    ;;
                  virtual*)
                    systemctl enable dcv-virtual-session && systemctl restart dcv-virtual-session
                    ;;
                esac
                systemctl enable dcvserver && systemctl restart dcvserver

                rm -f /etc/systemd/system/dcv-post-reboot.service
                rm -f ${!0}
                systemctl daemon-reload
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/aws/amazon-cloudwatch-agent/bin/config.json":
              content: |
                {
                    "agent": {
                        "metrics_collection_interval": 60,
                        "run_as_user": "cwagent"
                    },
                    "metrics": {
                        "namespace": "CWAgent",
                        "append_dimensions": {
                            "InstanceId": "${aws:InstanceId}"
                        },
                        "metrics_collected": {
                            "mem": {
                                "measurement": [
                                    "used_percent"
                                ]
                            }
                        }
                    }
                }
              mode: "000644"
              owner: "root"
              group: "root"
            "/root/install-sw.sh":
              content: !Sub |
                #!/bin/bash
                mkdir -p /tmp/cfn
                cd /tmp/cfn

                # EPEL: https://docs.fedoraproject.org/en-US/epel/
                dnf config-manager --set-enabled powertools
                dnf install -q -y epel-release epel-next-release

                # Snap: https://snapcraft.io/docs/installing-snap-on-centos
                dnf install -q -y snapd
                systemctl enable --now snapd snapd.socket
                ln -s /var/lib/snapd/snap /snap

                # Update OS
                dnf clean all
                dnf update -q -y

                # dnf-automatic
                dnf install -q -y dnf-automatic
                sed -i 's/apply_updates = no/apply_updates = yes/g' /etc/dnf/automatic.conf
                sed -i 's/emit_via = stdio/emit_via = motd/g' /etc/dnf/automatic.conf
                systemctl enable dnf-automatic.timer

                # CloudWatch agent: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html#download-CloudWatch-Agent-on-EC2-Instance-commandline-fleet
                if (arch | grep -q x86); then
                  curl -s -L -O https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/centos/amd64/latest/amazon-cloudwatch-agent.rpm
                else
                  curl -s -L -O https://amazoncloudwatch-agent-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/centos/arm64/latest/amazon-cloudwatch-agent.rpm
                fi
                dnf install -q -y ./amazon-cloudwatch-agent.rpm
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
                systemctl enable --now amazon-cloudwatch-agent

                # Webmin: https://webmin.com/download/
                export webmin="${installWebmin}"
                case $webmin in
                  Yes)
                    cd /tmp/cfn
                    curl -s -L -O https://raw.githubusercontent.com/webmin/webmin/master/setup-repos.sh
                    echo 'Y' | sh ./setup-repos.sh -f
                    dnf install -q -y webmin
                    ;;
                esac

                # USB and GPU driver DKMS
                dnf install -q -y dkms
                systemctl enable dkms

                # Kernel headers for GPU and USB remotization
                dnf install -q -y kernel-devel
                dnf install -q -y kernel-modules-extra
                dnf install -q -y usbutils

                # Docker: https://docs.docker.com/engine/install/centos/
                if [ "${installDocker}" = "Yes" ]; then
                  dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                  dnf install -q -y docker-ce
                  systemctl enable docker
                  usermod -aG docker cloud-user
                fi

                # AWS CLI: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
                dnf remove -q -y awscli
                sudo snap install aws-cli --classic
                if [ -e /snap/bin/aws ]; then
                  rm -f /home/cloud-user/update-awscli
                else
                  /home/cloud-user/update-awscli
                fi
                echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/cloud-user/.bashrc

                # Certbot: https://eff-certbot.readthedocs.io/en/stable/install.html#snap-recommended
                sudo snap install certbot --classic
                ln -s /snap/bin/certbot /usr/bin/certbot
                sudo snap set certbot trust-plugin-with-root=ok
                sudo snap install certbot-dns-route53

                rm -f ${!0}
              mode: "000740"
              owner: "root"
              group: "root"
          commands:
            install:
              command: "/root/install-sw.sh >> /var/log/install-sw.log 2>&1"
              ignoreErrors: "true"
        00_dcv_install:
          files:
            "/root/install-dcv.sh":
              content: !Sub |
                #!/bin/bash
                mkdir -p /tmp/cfn
                cd /tmp/cfn

                # Update OS
                dnf update -q -y

                # Support discontinued: https://docs.aws.amazon.com/dcv/latest/adminguide/doc-history-release-notes.html#dcv-2024-0-17979
                rm -f /home/cloud-user/update-dcv

                # DCV prereq: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html
                dnf groupinstall -q -y 'Server with GUI'
                dnf groupinstall -q -y GNOME
                dnf install -q -y amazon-ec2-utils

                # Microphone redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
                dnf install -q -y pulseaudio pulseaudio-utils
                dnf install -q -y gnome-tweaks
                dnf install -q -y firefox

                # Disable the Wayland protocol: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-wayland
                sed -i '/^\[daemon\]/a WaylandEnable=false' /etc/gdm/custom.conf

                # DCV: https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-server.html
                rpm --import https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY
                OS_VERSION=$(. /etc/os-release;echo $VERSION_ID | sed -e 's/\..*//g')
                curl -s -L -O https://d1uj6qtbmh3dt5.cloudfront.net/2023.1/Servers/nice-dcv-2023.1-17701-el$OS_VERSION-$(arch).tgz
                tar -xzf nice-dcv-2023.1-17701-el$OS_VERSION-$(arch).tgz && cd nice-dcv-*-el$OS_VERSION-$(arch)
                dnf install -q -y ./nice-dcv-server-*.rpm
                dnf install -q -y ./nice-dcv-web-viewer-*.rpm
                dnf install -q -y ./nice-xdcv-*.rpm
                if (arch | grep -q x86); then
                  dnf install -q -y ./nice-dcv-gltest-*.rpm
                fi

                # Printer redirection: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-printer.html
                dnf install -q -y cups
                GROUP=$(cat /etc/cups/cups-files.conf | grep -oP "SystemGroup\s\K\w+")
                usermod -a -G $GROUP dcv
                systemctl enable cups

                # glxinfo : https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-linux-prereq.html#linux-prereq-tools
                dnf install -q -y glx-utils
                dnf install -q -y vulkan-tools clinfo

                # QUIC: https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
                cp /etc/dcv/dcv.conf /etc/dcv/dcv.conf."`date +"%Y-%m-%d"`"
                sed -i "s/^#enable-quic-frontend=true/enable-quic-frontend=true/g" /etc/dcv/dcv.conf

                # Listen port: https://docs.aws.amazon.com/dcv/latest/adminguide/manage-port-addr.html
                sed -i "/^web-port=/d" /etc/dcv/dcv.conf
                sed -i "/^quic-port=/d" /etc/dcv/dcv.conf
                sed -i "/^\[connectivity\]/a web-port=${listenPort}" /etc/dcv/dcv.conf
                sed -i "/^\[connectivity\]/a quic-port=${listenPort}" /etc/dcv/dcv.conf

                # X11 dummy driver for non GPU instance console session
                dnf install -q -y xorg-x11-drv-dummy

                # Higher web client max resolution: https://docs.aws.amazon.com/dcv/latest/adminguide/config-param-ref.html
                sed -i "/^\[display/a web-client-max-head-resolution=(4096, 2160)" /etc/dcv/dcv.conf
                # Console session support
                sed -i "/^\[session-management\/automatic-console-session/a owner=\"cloud-user\"\nstorage-root=\"%home%\"" /etc/dcv/dcv.conf

                rm -f ${!0}
              mode: "000740"
              owner: "root"
              group: "root"
          commands:
            install:
              command: "/root/install-dcv.sh > /var/log/install-dcv.log 2>&1"
              ignoreErrors: "true"
        01_console:
          files:
            "/etc/X11/xorg.conf": # Modeline generator at http://xtiming.sourceforge.net/
              content: |
                Section "Device"
                    Identifier "DummyDevice"
                    Driver "dummy"
                    Option "UseEDID" "false"
                    VideoRam 512000
                EndSection

                Section "Monitor"
                    Identifier "DummyMonitor"
                    HorizSync   5.0 - 1000.0
                    VertRefresh 5.0 - 200.0
                    Option "ReducedBlanking"
                EndSection

                Section "Screen"
                    Identifier "DummyScreen"
                    Device "DummyDevice"
                    Monitor "DummyMonitor"
                    DefaultDepth 24
                    SubSection "Display"
                        Viewport 0 0
                        Depth 24
                        Virtual 4096 2160
                    EndSubSection
                EndSection
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      ImageId:
        !If [
          useCentosStream8x86,
          !Ref centosStream8x86,
          !Ref centosStream8arm64,
        ]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref instanceProfile
      KeyName: !Ref ec2KeyPair
      SubnetId: !Ref subnetID
      Monitoring: true
      DisableApiTermination: !If [enableProtection, true, false]
      EbsOptimized: true
      SecurityGroupIds:
        - !Ref securityGroup
        - !If [
            createCFsgHTTP,
            !Ref securityGroupForCloudFrontHTTP,
            !Ref AWS::NoValue,
          ]
        - !If [
            createCFsgHTTPS,
            !Ref securityGroupForCloudFrontHTTPS,
            !Ref AWS::NoValue,
          ]
        - !If [
            createAGA,
            !Ref securityGroupForR53HealthChecks,
            !Ref AWS::NoValue,
          ]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref volumeType
            VolumeSize: !Ref volumeSize
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir -p /tmp/cfn
          cd /tmp/cfn

          # disable IPv6 during setup
          sysctl -w net.ipv6.conf.all.disable_ipv6=1
          sysctl -w net.ipv6.conf.default.disable_ipv6=1

          # Switch to CentOS Vault
          sed -i "s/^mirrorlist=/#mirrorlist=/g" /etc/yum.repos.d/CentOS-Stream*.repo
          sed -i "s/^#baseurl=http:\/\/mirror.centos.org\/\$contentdir\/\$stream/baseurl=https:\/\/vault.centos.org\/8-stream/g" /etc/yum.repos.d/CentOS*.repo

          dnf clean all
          dnf install -q -y wget tmux unzip tar curl sed

          # EC2 Instance Connect: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-set-up.html
          if (arch | grep -q x86); then
            ARCH=amd64
          else
            ARCH=arm64
          fi
          curl -s -L -O https://amazon-ec2-instance-connect-us-west-2.s3.us-west-2.amazonaws.com/latest/linux_$ARCH/ec2-instance-connect.rhel8.rpm
          curl -s -L -O https://amazon-ec2-instance-connect-us-west-2.s3.us-west-2.amazonaws.com/latest/linux_amd64/ec2-instance-connect-selinux.noarch.rpm
          dnf install -q -y ./ec2-instance-connect.rhel8.rpm ./ec2-instance-connect-selinux.noarch.rpm

          # SSM agent: https://docs.aws.amazon.com/systems-manager/latest/userguide/agent-install-rhel.html
          if (! systemctl list-units | grep -q amazon-ssm-agent); then
            if (arch | grep -q x86); then
              dnf install -q -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
            else
              dnf install -q -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_arm64/amazon-ssm-agent.rpm
            fi
          fi
          systemctl enable --now amazon-ssm-agent

          # CfN scripts: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
          dnf install -q -y python3 python3-pip python3-setuptools python3-docutils
          curl -s -L -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          tar -xf aws-cfn-bootstrap-py3-latest.tar.gz
          cd aws-cfn-bootstrap-2.0
          python3 setup.py build > /var/log/install-cfn-helper.log 2>&1
          python3 setup.py install >> /var/log/install-cfn-helper.log 2>&1
          cd /tmp/cfn
          export CFN_INIT="python3 /usr/local/bin/cfn-init"

          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c setup

          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c dcv_install

          $CFN_INIT -v --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region} -c console

          # 
          systemctl set-default multi-user.target
          systemctl daemon-reload
          systemctl enable dcv-post-reboot

          # enable back IPv6
          sysctl -w net.ipv6.conf.all.disable_ipv6=0
          sysctl -w net.ipv6.conf.default.disable_ipv6=0

          sleep 1 && reboot
      Tags:
        - Key: Name
          Value: !Ref ec2Name
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  elasticIP:
    Condition: useElasticIP
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      NetworkBorderGroup: !Ref AWS::Region
      InstanceId: !Ref ec2Instance
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-elasticIP-${UID}"
            - UID:
                !Select [
                  3,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ]
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  backupPlan:
    Type: AWS::Backup::BackupPlan
    Condition: createBackup
    Properties:
      BackupPlan:
        BackupPlanName: !Sub
          - "${AWS::StackName}-backupPlan-${UID}"
          - UID:
              !Select [
                3,
                !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
              ]
        BackupPlanRule:
          - RuleName: !Sub
              - "${AWS::StackName}-backupRule-${UID}"
              - UID:
                  !Select [
                    3,
                    !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                  ]
            TargetBackupVault: !Ref backupVault
            ScheduleExpression: !Ref scheduleExpression
            ScheduleExpressionTimezone: !Ref scheduleExpressionTimezone
            Lifecycle:
              DeleteAfterDays: !Ref deleteAfterDays
      BackupPlanTags:
        {
          "StackName": !Ref AWS::StackName,
          "StackId": !Ref AWS::StackId,
          "GitHub": "https://github.com/aws-samples/amazon-ec2-nice-dcv-samples",
        }

  backupVault:
    Type: AWS::Backup::BackupVault
    Condition: createBackup
    UpdateReplacePolicy: Delete
    Properties:
      BackupVaultName: !Sub
        - "${AWS::StackName}-backupVault-${UID}"
        - UID:
            !Select [
              3,
              !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
            ]
      BackupVaultTags:
        {
          "StackName": !Ref AWS::StackName,
          "StackId": !Ref AWS::StackId,
          "GitHub": "https://github.com/aws-samples/amazon-ec2-nice-dcv-samples",
        }

  backupSelection:
    Type: AWS::Backup::BackupSelection
    Condition: createBackup
    Properties:
      BackupPlanId: !Ref backupPlan
      BackupSelection:
        IamRoleArn: !GetAtt backupRestoreRole.Arn
        Resources:
          - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${ec2Instance}
        SelectionName: !Sub
          - "${AWS::StackName}-backupSelection-${UID}"
          - UID:
              !Select [
                3,
                !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
              ]

  backupRestoreRole:
    Type: AWS::IAM::Role
    Condition: createBackup
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: restore-EC2-instance-profile
          PolicyDocument: # https://docs.aws.amazon.com/aws-backup/latest/devguide/restoring-ec2.html
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt instanceIamRole.Arn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  aga:
    Type: AWS::GlobalAccelerator::Accelerator
    Condition: createAGA
    Properties:
      Name: !Sub
        - "${AWS::StackName}-AGA-${UID}"
        - UID:
            !Select [
              3,
              !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
            ]
      IpAddressType: IPV4
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: GitHub
          Value: https://github.com/aws-samples/amazon-ec2-nice-dcv-samples

  agaListener1:
    Type: AWS::GlobalAccelerator::Listener
    Condition: createAGA
    Properties:
      AcceleratorArn: !Ref aga
      ClientAffinity: SOURCE_IP
      Protocol: TCP
      PortRanges:
        - FromPort: !Ref listenPort
          ToPort: !Ref listenPort
        - !If
          - createSgSSH
          - FromPort: 22
            ToPort: 22
          - !Ref AWS::NoValue
        - !If
          - installWebmin
          - FromPort: 10000
            ToPort: 10000
          - !Ref AWS::NoValue

  agaListener2:
    Type: AWS::GlobalAccelerator::Listener
    Condition: createAGA
    Properties:
      AcceleratorArn: !Ref aga
      ClientAffinity: SOURCE_IP
      Protocol: UDP
      PortRanges:
        - FromPort: !Ref listenPort
          ToPort: !Ref listenPort

  agaEndpointGroup1:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Condition: createAGA
    Properties:
      ListenerArn: !GetAtt agaListener1.ListenerArn
      EndpointGroupRegion: !Ref AWS::Region
      HealthCheckPort: !Ref listenPort
      HealthCheckProtocol: TCP
      ThresholdCount: 1
      EndpointConfigurations:
        - EndpointId: !Ref ec2Instance

  agaEndpointGroup2:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Condition: createAGA
    Properties:
      ListenerArn: !GetAtt agaListener2.ListenerArn
      EndpointGroupRegion: !Ref AWS::Region
      HealthCheckPort: !Ref listenPort
      HealthCheckProtocol: TCP
      ThresholdCount: 1
      EndpointConfigurations:
        - EndpointId: !Ref ec2Instance

Outputs:
  EC2console:
    Description: EC2 console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#Instances:search=${ec2Instance}"

  EC2instanceConnect:
    Condition: createSgEIC
    Description: EC2 Instance Connect
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2-instance-connect/ssh?connType=standard&instanceId=${ec2Instance}&osUser=cloud-user&sshPort=22#/"

  EC2serialConsole:
    Description: EC2 Serial Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2-instance-connect/ssh?connType=serial&instanceId=${ec2Instance}&serialPort=0#/"

  SSMsessionManager:
    Description: SSM Session Manager ("sudo passwd cloud-user" to change password)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${ec2Instance}"

  DCVwebConsole:
    Description: DCV web browser client (login as cloud-user)
    Value: !Sub
      - "https://${IpAddress}:${listenPort}"
      - IpAddress:
          !If [
            displayPublicIP,
            !GetAtt ec2Instance.PublicIp,
            !GetAtt ec2Instance.PrivateIp,
          ]

  DCVwebConsoleAGA:
    Condition: createAGA
    Description: DCV web browser client through AGA (login as cloud-user)
    Value: !Sub https://${aga.DnsName}:${listenPort}

  SecurityGroup:
    Description: Security Group
    Value: !Ref securityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup

  InstanceID:
    Description: Instance ID
    Value: !Ref ec2Instance
    Export:
      Name: !Sub ${AWS::StackName}-InstanceID

  IAMRole:
    Description: IAM Role
    Value: !Ref instanceIamRole
    Export:
      Name: !Sub ${AWS::StackName}-IAMRole

  WebminUrl:
    Condition: installWebmin
    Description: Webmin (set root password and login as root)
    Value:
      !If [
        displayPublicIP,
        !Sub "https://${ec2Instance.PublicIp}:10000",
        !Sub "https://${ec2Instance.PrivateIp}:10000",
      ]

  AGAconsole:
    Condition: createAGA
    Description: Global Accelerator console
    Value: !Sub https://us-west-2.console.aws.amazon.com/globalaccelerator/home#AcceleratorDetails:AcceleratorArn=${aga}

  AGAipv4Addresses:
    Condition: createAGA
    Description: Global Accelerator IPv4 addresses
    Value: !Join [", ", !GetAtt aga.Ipv4Addresses]
